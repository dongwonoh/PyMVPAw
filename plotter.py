from mvpa2.suite import *
import pylab as pylab
import numpy as np
from scipy.spatial.distance import pdist, squareform
import matplotlib.pyplot as plt
import scipy.cluster.hierarchy as clh

# Classical MDS interfaced from R (via Yarik)
import rpy2.robjects as ro
from rpy2.robjects.numpy2ri import numpy2ri
ro.conversion.py2ri = numpy2ri
#return MDS results
def rcmdscale(a, k=2, eig=False):
    res = ro.r['cmdscale'](a, eig=eig, k=k)
    if isinstance(res, ro.vectors.ListVector):
       assert(len(res) == 5)
       return [np.array(x) for x in res]
    return np.array(res)


dsmslist = ['dsms_idio_12','dsms_idio_7','dsms_idioemo_12','dsms_idiosex_12','dsms_oth','dsms_avg7']
order12 = ['fah','fap','fbh','fbp','fwh','fwp','mah','map','mbh','mbp','mwh','mwp']
labels12 = ['HAF', 'AAF', 'HBF', 'ABF', 'HWF', 'AWF', 'HAM', 'AAM', 'HBM', 'ABM', 'HWM', 'PWM']

order7 = ['A','B','F','H','M','P','W']
neworder=['Asian','White','Black','Male','Female','Happy','Angry']

def dsmadjust(dsm,amount,besides):
    for i,row in enumerate(dsm):
        for j,col in enumerate(row):
            if col!=besides: dsm[i][j]+= amount
    return dsm


####################################################################
####################################################################
# MT results
####################################################################
######
dsm = np.array([[0.6004329511,0.3464701735,0.4526639242,0.7205606087,0.2794393913,0.3302071226,0.6697928774],
[0.6052406949,0.3184365763,0.4559172627,0.7470526292,0.2529473708,0.5761462991,0.4238537009],
[0.2996655493,0.654531218,0.3912720148,0.6270418297,0.3729581703,0.4302376716,0.5697623284],
[0.2954895592,0.6742022648,0.3561059112,0.5924411324,0.4075588676,0.670942961,0.329057039],
[0.2921445454,0.2595219726,0.724166741,0.6907956033,0.3092043967,0.3289284609,0.6710715391],
[0.3357026472,0.2817248625,0.6912862452,0.7371936638,0.2628063362,0.5754989077,0.4245010923],
[0.5402179478,0.5105004312,0.4090636732,0.2847416519,0.7152583481,0.3743919934,0.6256080066],
[0.5102184792,0.5128711818,0.4666918599,0.270539541,0.729460459,0.6580886187,0.3419113813],
[0.2168359943,0.7509754114,0.2812131828,0.2722332626,0.7277667374,0.4405409184,0.5594590816],
[0.2194165321,0.7582699825,0.2640435028,0.2531208898,0.7468791102,0.7160411092,0.2839588908],
[0.2838697103,0.4651119366,0.6153657901,0.3185848062,0.6814151938,0.4106720279,0.5893279721],
[0.3115597001,0.4275540821,0.6304431089,0.2967960564,0.7032039436,0.6823585727,0.3176414273]]).transpose()

imgplot = plt.imshow(dsm,interpolation='nearest')
imgplot.set_cmap('RdYlBu') #http://wiki.scipy.org/Cookbook/Matplotlib/Show_colormaps
plt.colorbar(imgplot)
plt.xticks( arange(12), ('HAF', 'AAF', 'HBF', 'ABF', 'HWF', 'AWF', 'HAM', 'AAM', 'HBM', 'ABM', 'HWM', 'AWM'))
plt.yticks( arange(7), ('Asian','Black','White','Female','Male','Angry','Happy'))
plt.show()

####################################################################
####################################################################
# 12x12
####################################################################
####################################################################



avgndsms = {'FGO12': dsms['oth']['orth_12'], 'MT12C': dsms['oth']['idioAvg_12C'], 'MT12sex': dsms['oth']['sex_avgC']}

avgndsms = h5load('avg_nDSMs12x12.hdf5')

#dsm = dsms['oth']['orth_12']
#dsm = dsms['oth']['idioAvg_12C']
#dsm = avgdsms['clust_occipital.nii.gz']
#dsm = avgdsms['clust_lAmyg.nii.gz']
#dsm = avgdsms['clust_mOFC.nii.gz']
#dsm = avgdsms['clust_rMFG.nii.gz']
#dsm = avgdsms['clust_dmPFC.nii.gz']
#dsm = avgdsms['clust_rIFG.nii.gz']
#dsm = avgdsms['clust_rFFA.nii.gz']
#dsm = avgdsms['clust_lFFA.nii.gz']
#dsm = avgdsms['clust_rTPJ.nii.gz']
#dsm = avgdsms['clust_lIFG.nii.gz']
#dsm = avgdsms['clust_lParietal.nii.gz']
t='''hist(dsm.flatten(),bins=100)
pl.show()
for i,row in enumerate(dsm):
    for j,col in enumerate(row):
        if dsm[i][j]==.9: dsm[i][j]=.95'''


imgplot = plt.imshow(dsm,interpolation='nearest')
imgplot.set_cmap('RdYlBu') #http://wiki.scipy.org/Cookbook/Matplotlib/Show_colormaps
plt.colorbar(imgplot)
plt.xticks( arange(12), ('HAF', 'AAF', 'HBF', 'ABF', 'HWF', 'AWF', 'HAM', 'AAM', 'HBM', 'ABM', 'HWM', 'AWM'))
plt.yticks( arange(12), ('HAF', 'AAF', 'HBF', 'ABF', 'HWF', 'AWF', 'HAM', 'AAM', 'HBM', 'ABM', 'HWM', 'AWM'))
plt.show()


dsmlist = {'MT12Csex': dsms['oth']['sex_avgC'], 'MTavg12c': dsms['oth']['idioAvg_12C'], 'FG12': dsms['oth']['orth_12']}
for dsm in dsmlist:
    for cmap in ['RdYlBu']:
        imgplot = plt.imshow(dsmlist[dsm],interpolation='nearest')
        imgplot.set_cmap(cmap) #http://wiki.scipy.org/Cookbook/Matplotlib/Show_colormaps
        plt.colorbar(imgplot)
        plt.xticks( arange(12), ('HAF', 'AAF', 'HBF', 'ABF', 'HWF', 'AWF', 'HAM', 'AAM', 'HBM', 'ABM', 'HWM', 'AWM'))
        plt.yticks( arange(12), ('HAF', 'AAF', 'HBF', 'ABF', 'HWF', 'AWF', 'HAM', 'AAM', 'HBM', 'ABM', 'HWM', 'AWM'))
        #plt.show()
        savefig('%s_%s.png' % (dsm,cmap))
        plt.clf()
        plt.close()

avgndsms={'MTavg12c': dsms['oth']['idioAvg_12C'], 'FG12': dsms['oth']['orth_12']}
labels = ['HAF', 'AAF', 'HBF', 'ABF', 'HWF', 'AWF', 'HAM', 'AAM', 'HBM', 'ABM', 'HWM', 'AWM']
for dsm in avgndsms:
    #pearson
    mdsDSMr = rcmdscale(avgndsms[dsm])
    pylab.plot(mdsDSMr[:,0],mdsDSMr[:,1],'o')
    fig, ax = plt.subplots()
    ax.scatter(mdsDSMr[:,0],mdsDSMr[:,1])
    for i, txt in enumerate(labels):
        ax.annotate(txt, (mdsDSMr[i,0],mdsDSMr[i,1]))
    plt.savefig('%s_rMDS_partial.png' % (dsm), format='png')
    plt.clf()
    plt.close()
    pylab.clf() #clears hist
    pylab.close()
    d_avgDSMr = clh.dendrogram(clh.weighted(squareform(avgndsms[dsm])),labels=np.array(labels))
    plt.savefig('%s_rDendro_partial.png' % (dsm), format='png')
    plt.clf()
    plt.close()
    pylab.clf()
    pylab.close()

####################################################################
####################################################################
# 7x7
####################################################################
####################################################################

avgndsms = {
'idioavg7friendly': np.array([[0,0.580095924,0.651805609,0.570147004,0.523257871,0.607239042,0.575614193],
[0.580095924,0,0.615411161,0.496014133,0.420179444,0.495478851,0.505586696],
[0.651805609,0.615411161,0,0.364368253,0.541806269,0.509590248,0.463993798],
[0.570147004,0.496014133,0.364368253,0,0.662208674,0.469828863,0.407660056],
[0.523257871,0.420179444,0.541806269,0.662208674,0,0.43639176,0.46984109],
[0.607239042,0.495478851,0.509590248,0.469828863,0.43639176,0,0.577887929],
[0.575614193,0.505586696,0.463993798,0.407660056,0.46984109,0.577887929,0]]),
'orth7friendly': np.array([[0,1.5596175294,1.4877706084,0.9604526947,1.0395466822,1.0408684399,0.9591309633],
[1.5596175294,0,1.450511303,0.9287829474,1.0712146612,1.073592288,0.926405365],
[1.4877706084,1.450511303,0,1.1176227502,0.88238044,0.8784529239,1.1215501913],
[0.9604526947,0.9287829474,1.1176227502,0,2,0.9225957287,1.0774071177],
[1.0395466822,1.0712146612,0.88238044,2,0,1.0774021373,0.9225950163],
[1.0408684399,1.073592288,0.8784529239,0.9225957287,1.0774021373,0,2],
[0.9591309633,0.926405365,1.1215501913,1.0774071177,0.9225950163,2,0]]),
'clust_dmPFC.nii.gz': np.array([[0,1.4641442657,1.2673294332,0.8939647782,0.8923196583,0.8507045059,0.982731759],
[1.4641442657,0,1.2281232005,0.8139029838,0.9098087096,0.9129306288,0.791990763],
[1.2673294332,1.2281232005,0,0.7649105884,0.898227465,0.8131950589,0.8619610893],
[0.8939647782,0.8139029838,0.7649105884,0,1.5892383787,0.8807066073,0.6679624485],
[0.8923196583,0.9098087096,0.898227465,1.5892383787,0,0.7434190667,1.0262541347],
[0.8507045059,0.9129306288,0.8131950589,0.8807066073,0.7434190667,0,1.6248251065],
[0.982731759,0.791990763,0.8619610893,0.6679624485,1.0262541347,1.6248251065,0]]),
'clust_lAmyg.nii.gz': np.array([[0,1.3151935466,1.3587722355,0.860108314,0.8794244423,0.7751214661,0.9793979243],
[1.3151935466,0,1.3250157549,0.9157306594,0.8680075046,0.7405192496,1.0059575764],
[1.3587722355,1.3250157549,0,0.8473902668,0.8805014123,0.9663606786,0.734103309],
[0.860108314,0.9157306594,0.8473902668,0,1.6593290026,0.8324486337,0.8555660466],
[0.8794244423,0.8680075046,0.8805014123,1.6593290026,0,0.8015150083,0.8300416095],
[0.7751214661,0.7405192496,0.9663606786,0.8324486337,0.8015150083,0,1.5949527637],
[0.9793979243,1.0059575764,0.734103309,0.8555660466,0.8300416095,1.5949527637,0]]),
'clust_lFFA.nii.gz': np.array([[0,1.3888163254,1.4300141833,0.8068965244,0.9725243978,0.7993683789,0.988840001],
[1.3888163254,0,1.0961888379,0.7883515614,0.9046738143,0.819083905,0.8571375625],
[1.4300141833,1.0961888379,0,0.8395776125,0.8831889047,0.8997158175,0.7901593264],
[0.8068965244,0.7883515614,0.8395776125,0,1.5867882334,0.660788334,0.8617644082],
[0.9725243978,0.9046738143,0.8831889047,1.5867882334,0,0.8542600298,0.9144069807],
[0.7993683789,0.819083905,0.8997158175,0.660788334,0.8542600298,0,1.5887539937],
[0.988840001,0.8571375625,0.7901593264,0.8617644082,0.9144069807,1.5887539937,0]]),
'clust_lIFG.nii.gz': np.array([[0,1.1052090486,1.3888584677,0.8502224431,0.8657421025,0.8342770627,0.8479205844],
[1.1052090486,0,1.3692894578,0.9479227737,0.6415259228,0.8514432603,0.7345248308],
[1.3888584677,1.3692894578,0,0.7061099939,1.015848647,0.8921609916,0.9046648044],
[0.8502224431,0.9479227737,0.7061099939,0,1.5425609511,0.683946836,0.9002584165],
[0.8657421025,0.6415259228,1.015848647,1.5425609511,0,0.9330274134,0.6863297039],
[0.8342770627,0.8514432603,0.8921609916,0.683946836,0.9330274134,0,1.5744216716],
[0.8479205844,0.7345248308,0.9046648044,0.9002584165,0.6863297039,1.5744216716,0]]),
'clust_lParietal.nii.gz': np.array([[0,1.1710237985,1.2353117167,0.8780841841,0.7463133354,0.7071087392,0.868953586],
[1.1710237985,0,1.3649717374,0.9081058672,0.6821762854,0.8756742344,0.7114707312],
[1.2353117167,1.3649717374,0,0.8646070135,0.8824030974,0.8596445846,0.8683566401],
[0.8780841841,0.9081058672,0.8646070135,0,1.5469630622,0.8941588584,0.8434110737],
[0.7463133354,0.6821762854,0.8824030974,1.5469630622,0,0.6986530771,0.7283450348],
[0.7071087392,0.8756742344,0.8596445846,0.8941588584,0.6986530771,0,1.5070983117],
[0.868953586,0.7114707312,0.8683566401,0.8434110737,0.7283450348,1.5070983117,0]]),
'clust_mOFC.nii.gz': np.array([[0,1.3487139557,1.4320000314,0.9262089199,0.940475312,0.9680298643,0.8889590739],
[1.3487139557,0,1.4318519387,0.9630580726,0.9101400784,0.9967636842,0.8763867135],
[1.4320000314,1.4318519387,0,0.9243203199,0.9166764851,0.8055995015,1.0443706447],
[0.9262089199,0.9630580726,0.9243203199,0,1.8092090296,0.9288556663,0.8918378549],
[0.940475312,0.9101400784,0.9166764851,1.8092090296,0,0.8732097221,0.9475845235],
[0.9680298643,0.9967636842,0.8055995015,0.9288556663,0.8732097221,0,1.8108406959],
[0.8889590739,0.8763867135,1.0443706447,0.8918378549,0.9475845235,1.8108406959,0]]),
'clust_occipital.nii.gz': np.array([[0,1.2293100513,1.3207591505,0.813795341,0.8662207653,0.7643841557,0.9354050928],
[1.2293100513,0,1.1437754561,0.8710833581,0.6866090825,0.8355333103,0.719580372],
[1.3207591505,1.1437754561,0,0.7048519086,0.8363174414,0.7352517527,0.8010908881],
[0.813795341,0.8710833581,0.7048519086,0,1.504526857,0.655707313,0.859908539],
[0.8662207653,0.6866090825,0.8363174414,1.504526857,0,0.8262988806,0.7022389755],
[0.7643841557,0.8355333103,0.7352517527,0.655707313,0.8262988806,0,1.5138829787],
[0.9354050928,0.719580372,0.8010908881,0.859908539,0.7022389755,1.5138829787,0]]),
'clust_rFFA.nii.gz': np.array([[0,1.3149016743,1.239594565,0.7973879564,0.8956008122,0.8640270627,0.8254593196],
[1.3149016743,0,1.2187798263,0.8608660295,0.7921900736,0.8467290115,0.7911983507],
[1.239594565,1.2187798263,0,0.7300706739,0.8645206977,0.7277393119,0.8377947284],
[0.7973879564,0.8608660295,0.7300706739,0,1.5682072505,0.7006475271,0.7973186592],
[0.8956008122,0.7921900736,0.8645206977,1.5682072505,0,0.8672337399,0.7990120343],
[0.8640270627,0.8467290115,0.7277393119,0.7006475271,0.8672337399,0,1.5321904189],
[0.8254593196,0.7911983507,0.8377947284,0.7973186592,0.7990120343,1.5321904189,0]]),
'clust_rIFG.nii.gz': np.array([[0,1.0182660777,1.3575697561,0.7596219186,0.8363616328,0.7218587423,0.7526240678],
[1.0182660777,0,1.4247843925,0.7493983707,0.7652496214,0.8121406666,0.5959473695],
[1.3575697561,1.4247843925,0,0.9809155246,0.9178602671,0.9336918689,0.9482915174],
[0.7596219186,0.7493983707,0.9809155246,0,1.5388719548,0.8412155229,0.6226324813],
[0.8363616328,0.7652496214,0.9178602671,1.5388719548,0,0.6756675467,0.837475548],
[0.7218587423,0.8121406666,0.9336918689,0.8412155229,0.6756675467,0,1.3219052905],
[0.7526240678,0.5959473695,0.9482915174,0.6226324813,0.837475548,1.3219052905,0]]),
'clust_rMFG.nii.gz': np.array([[0,1.2729342303,1.2224018847,0.7810601735,0.8079186468,0.8427974303,0.7884466548],
[1.2729342303,0,1.2539135618,0.865002521,0.8860072347,0.805944051,0.9221910586],
[1.2224018847,1.2539135618,0,0.6641080792,0.8226250659,0.8637987024,0.6238781611],
[0.7810601735,0.865002521,0.6641080792,0,1.4437234313,0.668156396,0.7271132313],
[0.8079186468,0.8860072347,0.8226250659,1.4437234313,0,0.9115900522,0.6819818248],
[0.8427974303,0.805944051,0.8637987024,0.668156396,0.9115900522,0,1.4757495144],
[0.7884466548,0.9221910586,0.6238781611,0.7271132313,0.6819818248,1.4757495144,0]]),
'clust_rTPJ.nii.gz': np.array([[0,1.0581817499,1.3377079411,0.8034924687,0.8099057486,0.7252698649,0.8676351831],
[1.0581817499,0,1.3318764933,0.7804142071,0.7532055461,0.8670067907,0.6899555444],
[1.3377079411,1.3318764933,0,0.764626133,0.9487964047,0.8874854208,0.8511980689],
[0.8034924687,0.7804142071,0.764626133,0,1.4966003879,0.8260373436,0.6853322935],
[0.8099057486,0.7532055461,0.9487964047,1.4966003879,0,0.7678834357,0.8148915918],
[0.7252698649,0.8670067907,0.8874854208,0.8260373436,0.7678834357,0,1.4884166307],
[0.8676351831,0.6899555444,0.8511980689,0.6853322935,0.8148915918,1.4884166307,0]])
}

avgndsms = h5load('7x7_dsms_plotfriendly.hdf5')

#dsm = avgndsms['idioavg7friendly']
dsm = avgndsms['orth7friendly']
#dsm = avgdsms['clust_occipital.nii.gz']
#dsm = avgndsms['clust_lAmyg.nii.gz']
#dsm = avgndsms['clust_mOFC.nii.gz']
#dsm = avgndsms['clust_rMFG.nii.gz']
#dsm = avgndsms['clust_dmPFC.nii.gz']
#dsm = avgndsms['clust_rIFG.nii.gz']
#dsm = avgndsms['clust_rFFA.nii.gz']
#dsm = avgndsms['clust_lFFA.nii.gz']
#dsm = avgndsms['clust_rTPJ.nii.gz']
#dsm = avgndsms['clust_lIFG.nii.gz']
#dsm = avgndsms['clust_lParietal.nii.gz']

dsmlist = {'idioavg7friendly': np.array([[0,0.580095924,0.651805609,0.570147004,0.523257871,0.607239042,0.575614193],
[0.580095924,0,0.615411161,0.496014133,0.420179444,0.495478851,0.505586696],
[0.651805609,0.615411161,0,0.364368253,0.541806269,0.509590248,0.463993798],
[0.570147004,0.496014133,0.364368253,0,0.662208674,0.469828863,0.407660056],
[0.523257871,0.420179444,0.541806269,0.662208674,0,0.43639176,0.46984109],
[0.607239042,0.495478851,0.509590248,0.469828863,0.43639176,0,0.577887929],
[0.575614193,0.505586696,0.463993798,0.407660056,0.46984109,0.577887929,0]]),
'orth7friendly': np.array([[0,1.5596175294,1.4877706084,0.9604526947,1.0395466822,1.0408684399,0.9591309633],
[1.5596175294,0,1.450511303,0.9287829474,1.0712146612,1.073592288,0.926405365],
[1.4877706084,1.450511303,0,1.1176227502,0.88238044,0.8784529239,1.1215501913],
[0.9604526947,0.9287829474,1.1176227502,0,2,0.9225957287,1.0774071177],
[1.0395466822,1.0712146612,0.88238044,2,0,1.0774021373,0.9225950163],
[1.0408684399,1.073592288,0.8784529239,0.9225957287,1.0774021373,0,2],
[0.9591309633,0.926405365,1.1215501913,1.0774071177,0.9225950163,2,0]]),}
dsmlist = {'orth7adjusted2': a}
for dsm in dsmlist:
    for cmap in ['CMRmap_r','BuPu','gist_earth_r','GnBu','ocean_r','pink_r','PuBuGn','PuRd','RdYlBu','RdYlGn','Accent','jet','YlOrRd','gist_rainbow','hot','summer',
'YlGnBu','autumn','afmhot','gist_stern','CMRmap','gnuplot2','ocean','rainbow','terrain']:
        imgplot = plt.imshow(dsmlist[dsm],interpolation='nearest')
        imgplot.set_cmap(cmap) #http://wiki.scipy.org/Cookbook/Matplotlib/Show_colormaps
        plt.colorbar(imgplot)
        plt.xticks( arange(7), ('Asian','White','Black','Male','Female','Happy','Angry'))
        plt.yticks( arange(7), ('Asian','White','Black','Male','Female','Happy','Angry'))
        #plt.show()
        savefig('%s_%s.png' % (dsm,cmap))
        plt.clf()
        plt.close()

['CMRmap_r','BuPu','gist_earth_r','GnBu','ocean_r','pink_r','PuBuGn','PuRd','RdYlBu','RdYlGn','Accent','jet','YlOrRd','gist_rainbow','hot','summer',
'YlGnBu','autumn','afmhot','gist_stern','CMRmap','gnuplot2','ocean','rainbow','terrain']:

# text properties: http://matplotlib.org/api/artist_api.html#matplotlib.text.Text

labels = ['Asian','White','Black','Male','Female','Happy','Angry']
labels= ['A','B','F','H','M','P','W']
for dsm in avgndsms:
    #pearson
    mdsDSMr = rcmdscale(avgndsms[dsm])
    pylab.plot(mdsDSMr[:,0],mdsDSMr[:,1],'o')
    fig, ax = plt.subplots()
    ax.scatter(mdsDSMr[:,0],mdsDSMr[:,1])
    for i, txt in enumerate(labels):
        ax.annotate(txt, (mdsDSMr[i,0],mdsDSMr[i,1]))
    plt.savefig('%s_rMDS.png_partial7x7' % (dsm), format='png')
    plt.clf()
    plt.close()
    pylab.clf() #clears hist
    pylab.close()
    d_avgDSMr = clh.dendrogram(clh.weighted(squareform(avgndsms[dsm])),labels=np.array(labels))
    plt.savefig('%s_rDendro_partial7x7.png' % (dsm), format='png')
    plt.clf()
    plt.close()
    pylab.clf()
    pylab.close()



